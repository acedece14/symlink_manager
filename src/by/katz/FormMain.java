package by.katz;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class FormMain extends JFrame {
    private JPanel pnlMain;
    private JTextField edtSymlinkPath;
    private JButton btnOpenDir;
    private JButton btnOpenFile;
    private JLabel lblStatus;
    private final FormListener formListener;

    public FormMain(FormListener formListener) {
        this.formListener = formListener;
        setTitle("Symlink creator");
        setContentPane(pnlMain);
        pack();
        setSize(600, getHeight());
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        lblStatus.setText(Settings.get().getLastTarget());
        btnOpenDir.addActionListener(event -> openDir());
        btnOpenFile.addActionListener(event -> openFile());
        lblStatus.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lblStatus.addMouseListener(new MouseAdapter() {
            @Override public void mouseClicked(MouseEvent e) { selectTarget(); }
        });
        edtSymlinkPath.setText(Settings.get().getLastSymlink());
        edtSymlinkPath.addKeyListener(new KeyAdapter() {
            @Override public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER)
                    formListener.onTextEntered(edtSymlinkPath.getText());
            }
        });
        setVisible(true);
        setIconImage(Toolkit.getDefaultToolkit().getImage("d:\\workspace\\SymlinkCreator\\icon.png"));
    }

    private void selectTarget() {
        var dialog = new JFileChooser();
        dialog.setDialogType(JFileChooser.OPEN_DIALOG);
        dialog.setMultiSelectionEnabled(false);
        dialog.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        dialog.setCurrentDirectory(new File(Settings.get().getLastDirectory()));
        var res = dialog.showDialog(FormMain.this, "OK");
        if (res == JFileChooser.APPROVE_OPTION) {
            var targetPath = dialog.getSelectedFile().getAbsolutePath();
            Settings.get().setLastTarget(targetPath);
            lblStatus.setText(targetPath);
        }
    }

    private void openDir() {
        var dialog = new JFileChooser();
        dialog.setDialogType(JFileChooser.SAVE_DIALOG);
        dialog.setMultiSelectionEnabled(false);
        dialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        dialog.setCurrentDirectory(new File(Settings.get().getLastDirectory()));
        var res = dialog.showDialog(FormMain.this, "OK");
        Settings.get().setLastDirectory(dialog.getCurrentDirectory().getAbsolutePath());
        if (res == JFileChooser.APPROVE_OPTION) {
            edtSymlinkPath.setText(dialog.getSelectedFile().getAbsolutePath());
            formListener.onDirSelected(dialog.getSelectedFile());
            Settings.get().setLastSymlink(dialog.getSelectedFile().getAbsolutePath());
        }
    }

    private void openFile() {
        var dialog = new JFileChooser();
        dialog.setDialogType(JFileChooser.SAVE_DIALOG);
        dialog.setMultiSelectionEnabled(false);
        dialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        dialog.setCurrentDirectory(new File(Settings.get().getLastDirectory()));
        var res = dialog.showDialog(FormMain.this, "OK");
        Settings.get().setLastDirectory(dialog.getCurrentDirectory().getAbsolutePath());
        if (res == JFileChooser.APPROVE_OPTION) {
            edtSymlinkPath.setText(dialog.getSelectedFile().getAbsolutePath());
            formListener.onFileSelected(dialog.getSelectedFile());
            Settings.get().setLastSymlink(dialog.getSelectedFile().getAbsolutePath());
        }
    }

    public void showError(String errorText) {
        JOptionPane.showMessageDialog(this, errorText);
    }

    public void showInfo(String info) {
        lblStatus.setText(info);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pnlMain = new JPanel();
        pnlMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        edtSymlinkPath = new JTextField();
        pnlMain.add(edtSymlinkPath, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(391, 30), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        pnlMain.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(391, 14), null, 0, false));
        btnOpenDir = new JButton();
        btnOpenDir.setText("Dir");
        pnlMain.add(btnOpenDir, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), new Dimension(60, -1), 0, false));
        btnOpenFile = new JButton();
        btnOpenFile.setText("File");
        pnlMain.add(btnOpenFile, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), new Dimension(60, -1), 0, false));
        lblStatus = new JLabel();
        lblStatus.setText("Label");
        pnlMain.add(lblStatus, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return pnlMain; }

}
